# -*- coding: utf-8 -*-
"""Notebook 1 (Data Preprocessing).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j-13Q1MfVsJ7otTw2lESB_P7f1TTKyzL

# Importing Packages and Reading Data
"""

# Import Packages

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split

# Mount Drive
from google.colab import drive
drive.mount('/content/drive')

# Read Data
df = pd.read_csv('/content/drive/MyDrive/Arnav Gorantla/Data/smmh.csv')

"""# Data Preprocessing"""

# Dimensions of the dataset and look at it
print("Dimensions of the dataset are: ",df.shape)
pd.set_option('display.max_columns', None)
df.head()



# Look at number of null values Before Imputation
np.sum(df.isnull())

# looking at the unique values in the column with nulls
df['5. What type of organizations are you affiliated with?'].value_counts()

# imputing null values
df["5. What type of organizations are you affiliated with?"].fillna(value="Unknown", inplace=True)

# Look at number of null values after Imputation
np.sum(df.isnull())

df.columns

# Renaming all columns
df = df.rename(columns={"1. What is your age?": "Age", "2. Gender": "gender" ,"3. Relationship Status": "Relationship_Status", "4. Occupation Status": "Occupation", "5. What type of organizations are you affiliated with?": "organizations_affiliated_with", "6. Do you use social media?": "use_social_media", "7. What social media platforms do you commonly use?": "what_social_media_do_you_use", "8. What is the average time you spend on social media every day?": "average_time_on_social_media", "9. How often do you find yourself using Social media without a specific purpose?": "on_social_media_without_purpose", "10. How often do you get distracted by Social media when you are busy doing something?": "get_distracted_by_social_media", "11. Do you feel restless if you haven't used Social media in a while?": "relentless_not_using social_media", "12. On a scale of 1 to 5, how easily distracted are you?": "easily_distracted", "13. On a scale of 1 to 5, how much are you bothered by worries?": "bothered_by_worries", "14. Do you find it difficult to concentrate on things?": "diffecult_consentrate", "15. On a scale of 1-5, how often do you compare yourself to other successful people through the use of social media?": "comepare_self_to_successful_people", "16. Following the previous question, how do you feel about these comparisons, generally speaking?": "how_do_you_feel_after_comparisons", "17. How often do you look to seek validation from features of social media?": "seek_validation_from_social_media", "18. How often do you feel depressed or down?": "do_you_feel_depressed", "19. On a scale of 1 to 5, how frequently does your interest in daily activities fluctuate?": "interest_in_daily_activities_fluctuate", "20. On a scale of 1 to 5, how often do you face issues regarding sleep?": "sleeping_issues" })

df.head()

df.drop('Timestamp', inplace=True, axis=1)

df.head()

#looking at data types for each column.
df.dtypes

"""# EDA

## Age
"""

# making Age numerical
df = df.astype({'Age': 'int64'})
# Look at summary stats
df["Age"].describe()

# Define lower and upper limits
lower_limit = 13
upper_limit = 34

# Filter the DataFrame based on the 'Age' column
df = df[(df['Age'] >= lower_limit) & (df['Age'] <= upper_limit)]

df["Age"].describe()

plt.scatter(range(len(df)), df['Age'])
plt.xlabel('Persons Number')
plt.ylabel('Age')
plt.title('Scatter Plot of Age')
plt.show()

plt.hist(df['Age'], bins=10, edgecolor='black')  # You can adjust the number of bins as needed
plt.xlabel('Age')
plt.ylabel('People of the same age')
plt.title('Histogram of Age')
plt.show()

plt.figure(figsize=(15,4))
sns.boxplot(x=df['Age'])

"""## on_social_media_without_purpose"""

# Look at summary stats
df["on_social_media_without_purpose"].describe()

# Look at value counts
df['on_social_media_without_purpose'].value_counts()

# Look at Histogram
plt.figure(figsize=(10,6))
plt.hist(df['on_social_media_without_purpose'], edgecolor = 'black')
plt.xlabel('People on social media without purpose')
plt.show()

"""##get_distracted_by_social_media"""

# Look at summary stats
df["get_distracted_by_social_media"].describe()

# Look at value counts
df['get_distracted_by_social_media'].value_counts()

# Look at Histogram
plt.figure(figsize=(10,6))
plt.hist(df['get_distracted_by_social_media'], edgecolor = 'black')
plt.xlabel('People that get distracted by social media')
plt.show()

"""##relentless_not_using social_media"""

# Look at summary stats
df["relentless_not_using social_media"].describe()

# Look at value counts
df['relentless_not_using social_media'].value_counts()

# Look at Histogram
plt.figure(figsize=(10,6))
plt.hist(df['relentless_not_using social_media'], edgecolor = 'black')
plt.xlabel('People that get relentless after not using social media')
plt.show()

"""##easily_distracted"""

# Look at summary stats
df["easily_distracted"].describe()

# Look at value counts
df['easily_distracted'].value_counts()

# Look at Histogram
plt.figure(figsize=(10,6))
plt.hist(df['easily_distracted'], edgecolor = 'black')
plt.xlabel('People that get easily distracted')
plt.show()

"""##bothered_by_worries"""

# Look at summary stats
df["bothered_by_worries"].describe()

# Look at value counts
df['bothered_by_worries'].value_counts()

# Look at Histogram
plt.figure(figsize=(10,6))
plt.hist(df['bothered_by_worries'], edgecolor = 'black')
plt.xlabel('People that get bothered by worries ')
plt.show()

"""##diffecult_consentrate"""

# Look at summary stats
df["diffecult_consentrate"].describe()

# Look at value counts
df['diffecult_consentrate'].value_counts()

# Look at Histogram
plt.figure(figsize=(10,6))
plt.hist(df['diffecult_consentrate'], edgecolor = 'black')
plt.xlabel('People that get ')
plt.show()

"""##comepare_self_to_successful_people"""

# Look at summary stats
df["comepare_self_to_successful_people"].describe()

# Look at value counts
df['comepare_self_to_successful_people'].value_counts()

# Look at Histogram
plt.figure(figsize=(10,6))
plt.hist(df['comepare_self_to_successful_people'], edgecolor = 'black')
plt.xlabel('People that comepare themself to successful people on social media ')
plt.show()

"""##how_do_you_feel_after_comparisons"""

# Look at summary stats
df["how_do_you_feel_after_comparisons"].describe()

# Look at value counts
df['how_do_you_feel_after_comparisons'].value_counts()

# Look at Histogram
plt.figure(figsize=(10,6))
plt.hist(df['how_do_you_feel_after_comparisons'], edgecolor = 'black')
plt.xlabel('How peoiple feel after the comparisons')
plt.show()

"""##seek_validation_from_social_media"""

# Look at summary stats
df["seek_validation_from_social_media"].describe()

# Look at value counts
df['seek_validation_from_social_media'].value_counts()

# Look at Histogram
plt.figure(figsize=(10,6))
plt.hist(df['seek_validation_from_social_media'], edgecolor = 'black')
plt.xlabel('People that often seek validation from social media')
plt.show()

"""##do_you_feel_depressed"""

# Look at summary stats
df["do_you_feel_depressed"].describe()

# Look at value counts
df['do_you_feel_depressed'].value_counts()

# Look at Histogram
plt.figure(figsize=(10,6))
plt.hist(df['do_you_feel_depressed'], edgecolor = 'black')
plt.xlabel('People that feel depressed ')
plt.show()

"""##interest_in_daily_activities_fluctuate"""

# Look at summary stats
df["interest_in_daily_activities_fluctuate"].describe()

# Look at value counts
df['interest_in_daily_activities_fluctuate'].value_counts()

# Look at Histogram
plt.figure(figsize=(10,6))
plt.hist(df['interest_in_daily_activities_fluctuate'], edgecolor = 'black')
plt.xlabel('Peoples interest in daily activitities fluctuate')
plt.show()

"""##sleeping_issues"""

# Look at summary stats
df["sleeping_issues"].describe()

# Look at value counts
df['sleeping_issues'].value_counts()

# Look at Histogram
plt.figure(figsize=(10,6))
plt.hist(df['sleeping_issues'], edgecolor = 'black')
plt.xlabel('People that have sleeping issues ')
plt.show()

"""##gender"""

# Look at summary stats
df["gender"].describe()

# Look at value counts
df['gender'].value_counts()

# Look at Histogram
plt.figure(figsize=(10,6))
plt.hist(df['gender'], edgecolor = 'black')
plt.xlabel('Gender')
plt.show()

"""##Relationship Status

"""

# Look at summary stats
df["Relationship_Status"].describe()

# Look at value counts
df['Relationship_Status'].value_counts()

# Look at Histogram
plt.figure(figsize=(10,6))
plt.hist(df['Relationship_Status'], edgecolor = 'black')
plt.xlabel('Relationship Status')
plt.show()

"""##Occupation"""

# Look at summary stats
df["Occupation"].describe()

# Look at value counts
df['Occupation'].value_counts()

# Look at Histogram
plt.figure(figsize=(10,6))
plt.hist(df['Occupation'], edgecolor = 'black')
plt.xlabel('Occupation')
plt.show()

"""##Affiliated Organizations"""

# Look at summary stats
df["organizations_affiliated_with"].describe()

# Look at value counts
df['organizations_affiliated_with'].value_counts()

# Look at Histogram
plt.figure(figsize=(19,10))
plt.hist(df['organizations_affiliated_with'], edgecolor = 'black')
plt.xlabel('Affiliated Organizations ')
plt.show()

"""##Use Social media"""

# Look at summary stats
df["use_social_media"].describe()

# Look at value counts
df['use_social_media'].value_counts()

# Look at Histogram
plt.figure(figsize=(10,6))
plt.hist(df['use_social_media'], edgecolor = 'black')
plt.xlabel('People that get ')
plt.show()

"""##What social media do you use"""

# Look at summary stats
df["what_social_media_do_you_use"].describe()

# Look at value counts
df['what_social_media_do_you_use'].value_counts()

# Look at Histogram
plt.figure(figsize=(20,6))
plt.hist(df['what_social_media_do_you_use'], edgecolor = 'black')
plt.xlabel('Social Media Type')
plt.xticks(rotation='vertical')
plt.show()

"""##Average Time On Social Media"""

# Look at summary stats
df["average_time_on_social_media"].describe()

# Look at value counts
df['average_time_on_social_media'].value_counts()

# Look at Histogram
plt.figure(figsize=(10,6))
plt.hist(df['average_time_on_social_media'], edgecolor = 'black')
plt.xlabel('Average Time on Social Media')
plt.xticks(rotation='vertical')
plt.show()

"""#Heat Map"""

# plotting correlation heatmap
dataplot=sns.heatmap(df.corr())

# displaying heatmap
plt.show()

"""# EDA / Data Visualizations

#Column Droping
"""

df.shape

df['use_social_media'].value_counts()

df = df[df['use_social_media'] != 'No']
df.shape

df['Relationship_Status'].value_counts()

df = df[df['Relationship_Status'] != 'Divorced']
df.shape

df['gender'].value_counts()

df['gender'].unique()

values_to_drop = ['Nonbinary ', 'Non-binary', 'NB', 'unsure ', 'Non binary ', 'There are others???']

df = df[~df['gender'].isin(values_to_drop)]

df.shape

df['Occupation'].value_counts()

df = df[df['Occupation'] != 'Retired']
df.shape

"""#Categorical to Numerical Mapping

"""

df.head()

df = df.copy()
df = df.reset_index()

# replacing values
df['Occupation_Numerical'] = df['Occupation'].replace(['University Student', 'School Student', 'Salaried Worker'],
                        [1, 2, 3])
print(df['Occupation'].value_counts())
df['Occupation_Numerical'].value_counts()

df['Relationship_Status_Numerical'] = df['Relationship_Status'].replace(['In a relationship', 'Single', 'Married'],
                        [2, 1, 2])
print(df['Relationship_Status'].value_counts())
df['Relationship_Status_Numerical'].value_counts()

df['gender_Numerical'] = df['gender'].replace(['Male', 'Female'],
                        [1, 2])
print(df['gender'].value_counts())
df['gender_Numerical'].value_counts()

df['average_time_on_social_media_Numerical'] = df['average_time_on_social_media'].replace(['Between 2 and 3 hours', 'More than 5 hours',
       'Between 3 and 4 hours', 'Between 1 and 2 hours',
       'Less than an Hour', 'Between 4 and 5 hours'],
                        [3, 6, 4, 2, 1, 5])
print(df['average_time_on_social_media'].value_counts())
df['average_time_on_social_media_Numerical'].value_counts()

df['organizations_affiliated_with'].value_counts()

#Samples in each organization_affiliated_with

# University = 285
# School = 51
# Private = 59
# Company = 44
# Unknown = 20
# Government = 4

# sample code
temp_string = "apples are tasty"
if "banana" in temp_string:
  print("yes")
else:
  print("no")

# Create our one-hot encoded columns
df['University'] = 0
df['School'] = 0
df['Private'] = 0
df['Company'] = 0
df = df.copy()

# University
for i in range(len(df)):
  temp_string = df.loc[i,'organizations_affiliated_with']
  if "University" in temp_string:
    df['University'][i] = 1
  if "School" in temp_string:
    df['School'][i] = 1
  if "Private" in temp_string:
    df['Private'][i] = 1
  if "Company" in temp_string:
    df['Company'][i] = 1

df['University'].sum()

df['School'].sum()

df['Company'].sum()

df['Private'].sum()

# replacing values
np.unique(df.what_social_media_do_you_use.values)[0]

import pandas as pd

# Example DataFrame with lists in 'what_social_media_do_you_use' column
data = {'what_social_media_do_you_use': [["Facebook", "Twitter"],
                                         ["YouTube", "Instagram"],
                                         ["Discord", "Pinterest", "TikTok", "Snapchat"]]}
df2 = pd.DataFrame(data)

# Function to count the number of social media platforms
def count_social_medias(social_media_list):
    return len(social_media_list)

# Apply the function to the 'what_social_media_do_you_use' column and add the new column
df['how_many_social_medias_use'] = df['what_social_media_do_you_use'].apply(count_social_medias)

df.head()

social_media_platforms = ['Facebook', 'Twitter', 'YouTube', 'Discord', 'Reddit', 'Instagram', 'Pinterest', 'TikTok', 'Snapchat']

for platform in social_media_platforms:
    df[platform] = df['what_social_media_do_you_use'].apply(lambda x: 1 if platform.lower() in str(x).lower() else 0)

df['how_many_platforms'] = df[social_media_platforms].sum(axis=1)

df = df.drop('what_social_media_do_you_use', axis=1)

df.head()

df.head()

# df.drop('gender', inplace=True, axis=1)
# df.drop('Relationship_Status', inplace=True, axis=1)
# df.drop('Occupation', inplace=True, axis=1)
# df.drop('average_time_on_social_media', inplace=True, axis=1)
# df.drop('how_many_social_medias_use', inplace=True, axis=1)
# df.drop('organizations_affiliated_with', inplace=True, axis=1)

df.drop('use_social_media', inplace=True, axis=1)
df.drop('index', inplace=True, axis=1)

df.head()

clean_data = df.copy()
clean_data.to_csv('/content/drive/MyDrive/Arnav Gorantla/Data/clean_data.csv')

clean_data.head()

# plotting correlation heatmap
dataplot=sns.heatmap(df.corr())

# displaying heatmap
plt.show()

fig, ax = plt.subplots(figsize=(12,6))
sns.heatmap(df.corr().loc[['relentless_not_using social_media'],:], ax = ax)